<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/practice/practice/src/main/java/com/interview/practice/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/practice/practice/src/main/java/com/interview/practice/Main.java" />
              <option name="originalContent" value="package com.interview.practice;&#10;&#10;import java.util.Map;&#10;import java.util.HashMap;&#10;&#10;class Main {&#10;    public static void main(String[] args) {&#10;        int[] ints = {3,5};&#10;        ExecutionContextBase ctx = new GlobalContext();&#10;        ctx.setValue(&quot;key1&quot;, 3);&#10;        ctx.setValue(&quot;key2&quot;, ints);&#10;        &#10;        String[] cities = {&quot;NY&quot;, &quot;CA&quot;, &quot;DC&quot;};&#10;        Region region = new Region(1, &quot;AMER&quot;, cities);&#10;        ctx.setValue(GlobalContext.HOST_REGION, region);&#10;        &#10;        &#10;        &#10;        int key1 = ctx.getValue(&quot;key1&quot;);&#10;        System.out.println(&quot;DEBUG: key1=&quot; + key1);&#10;        int[] key2 = ctx.getValue(&quot;key2&quot;);&#10;        System.out.println(&quot;DEBUG: key2=&quot; + (key2 == null ? &quot;null&quot; : key2.length));&#10;        Region hostRegion = ctx.getValue(GlobalContext.HOST_REGION);&#10;        System.out.println(&quot;DEBUG: hostRegion=&quot; + (hostRegion == null ? &quot;null&quot; : hostRegion.name));&#10;&#10;        if (key2 == null) {&#10;            System.err.println(&quot;ERROR: key2 is null&quot;);&#10;            return;&#10;        }&#10;        if (hostRegion == null) {&#10;            System.err.println(&quot;ERROR: hostRegion is null&quot;);&#10;            return;&#10;        }&#10;        System.out.println(&quot;int val: &quot; + key1);&#10;        System.out.println(&quot;Array val: &quot; + key2[1]);&#10;        System.out.println(&quot;Class val: &quot; + hostRegion.name);&#10;    }&#10;}&#10;&#10; class ExecutionContextBase {&#10;    private Map&lt;String, Object&gt; attributes;&#10;&#10;    public ExecutionContextBase() {&#10;        this.attributes = new HashMap&lt;&gt;();&#10;    }&#10;    public &lt;T&gt; void setValue(String name, T value ) {&#10;        this.attributes.put(name, value);&#10;    }&#10;&#10;    public &lt;T&gt; T getValue(String attribName){&#10;&#10;        if(!attribName.isEmpty()) {&#10;            return (T)attributes.get(attribName);        &#10;            &#10;        }&#10;        return null;&#10;    }&#10;}&#10;&#10;&#10;class GlobalContext extends ExecutionContextBase {&#10;&#10;    public static final String HOST_REGION = &quot;region&quot;;//AMER,EMEA,APAC;&#10;}&#10;&#10;class Region {&#10;    public int code;&#10;    public String name;&#10;    public String[] cities;&#10;    &#10;    public Region (int code, String name, String[] cities) {&#10;        this.code = code;&#10;        this.name = name;&#10;        this.cities = cities;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.interview.practice;&#10;&#10;import java.util.Map;&#10;import java.util.HashMap;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        int[] ints = {3,5};&#10;        ExecutionContextBase ctx = new GlobalContext();&#10;        ctx.setValue(&quot;key1&quot;, 3);&#10;        ctx.setValue(&quot;key2&quot;, ints);&#10;        &#10;        String[] cities = {&quot;NY&quot;, &quot;CA&quot;, &quot;DC&quot;};&#10;        Region region = new Region(1, &quot;AMER&quot;, cities);&#10;        ctx.setValue(GlobalContext.HOST_REGION, region);&#10;        &#10;        &#10;        &#10;        int key1 = ctx.getValue(&quot;key1&quot;);&#10;        System.out.println(&quot;DEBUG: key1=&quot; + key1);&#10;        int[] key2 = ctx.getValue(&quot;key2&quot;);&#10;        System.out.println(&quot;DEBUG: key2=&quot; + (key2 == null ? &quot;null&quot; : key2.length));&#10;        Region hostRegion = ctx.getValue(GlobalContext.HOST_REGION);&#10;        System.out.println(&quot;DEBUG: hostRegion=&quot; + (hostRegion == null ? &quot;null&quot; : hostRegion.name));&#10;&#10;        if (key2 == null) {&#10;            System.err.println(&quot;ERROR: key2 is null&quot;);&#10;            return;&#10;        }&#10;        if (hostRegion == null) {&#10;            System.err.println(&quot;ERROR: hostRegion is null&quot;);&#10;            return;&#10;        }&#10;        System.out.println(&quot;int val: &quot; + key1);&#10;        System.out.println(&quot;Array val: &quot; + key2[1]);&#10;        System.out.println(&quot;Class val: &quot; + hostRegion.name);&#10;    }&#10;}&#10;&#10; class ExecutionContextBase {&#10;    private Map&lt;String, Object&gt; attributes;&#10;&#10;    public ExecutionContextBase() {&#10;        this.attributes = new HashMap&lt;&gt;();&#10;    }&#10;    public &lt;T&gt; void setValue(String name, T value ) {&#10;        this.attributes.put(name, value);&#10;    }&#10;&#10;    public &lt;T&gt; T getValue(String attribName){&#10;&#10;        if(!attribName.isEmpty()) {&#10;            return (T)attributes.get(attribName);        &#10;            &#10;        }&#10;        return null;&#10;    }&#10;}&#10;&#10;&#10;class GlobalContext extends ExecutionContextBase {&#10;&#10;    public static final String HOST_REGION = &quot;region&quot;;//AMER,EMEA,APAC;&#10;}&#10;&#10;class Region {&#10;    public int code;&#10;    public String name;&#10;    public String[] cities;&#10;    &#10;    public Region (int code, String name, String[] cities) {&#10;        this.code = code;&#10;        this.name = name;&#10;        this.cities = cities;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>